<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace后面写的是这个映射文件对应接口的包和接口名-->
<mapper namespace="com.example.mybatis.mapper.UserMapper">
    <!--接口中有几个方法这里就要放几个对应的<select><insert><update><delete>-->
    <!--id是方法的名字, parameterType是对应方法中参数的类型-->
    <!--只有查询操作可以写返回类型，其余增删改不需要写返回类型-->
    <!--#{id}就类似与以前JDBC中的占位符?-->
    <!--#{loginCount}此处的名字必须和实体中的属性名一致-->
    <resultMap id="userResultMap" type="com.example.mybatis.domain.User">
        <id property="id" column="id" />
        <id property="email" column="email" />
        <id property="password" column="password" />
        <id property="birthday" column="birthday" />
        <id property="sex" column="sex" />
        <id property="loginCount" column="login_count" />
        <id property="lastLoginTime" column="last_login_time" />
    </resultMap>
    <insert id="save" parameterType="com.example.mybatis.domain.User">
         insert  into users(email, password, birthday, sex, login_count, last_login_time)
         value (#{email},#{password}, #{birthday}, #{sex}, #{loginCount}, #{lastLoginTime})
    </insert>
    <delete id="deleteById" parameterType="java.lang.Integer">
        delete   from users where id = #{id}
    </delete>

    <update id="updateById" parameterType="com.example.mybatis.domain.User">
        upade users set email=#{email}, password=#{password}, birthday=#{birthday}, sex=#{sex},login_count=#{loginCount}, last_login_time=#{lastLoginTime} where id = #{id}
    </update>
<!--#{id}就类似于以前JDBC中的占位符？-->
    <select id ="findOne" parameterType="java.lang.Integer" resultMap="userResultMap">
        select id,email,password,birthday,sex,login_count,last_login_time from users where id= #{id}
    </select>

    <select id="findAll" resultMap="userResultMap">
        select id,email,password,birthday,sex,login_count,last_login_time from users
    </select>

</mapper>
